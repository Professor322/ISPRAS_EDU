#! /bin/sh

set -e

grepconf () {
	w=" 	" # space tab
	# sed is cool.
	res=`squid -k parse 2>&1 |
		grep "Processing:" |
		sed s/.*Processing:\ // |
		sed -ne '
			s/^'$1'['"$w"']\+\([^'"$w"']\+\).*$/\1/p;
			t end;
			d;
			:end q'`
	[ -n "$res" ] || res=$2
	echo "$res"
}

grepconf2 () {
	w=" 	" # space tab
	# sed is cool.
	res=`squid -k parse 2>&1 |
		grep "Processing:" |
		sed s/.*Processing:\ // |
		sed -ne '
			s/^'$1'['"$w"']\+[^'"$w"']\+['"$w"']\+\([^'"$w"']\+\).*$/\1/p;
			t end;
			d;
			:end q'`
	[ -n "$res" ] || res=$2
	echo "$res"
}

case "$1" in
	configure)
		#
		# If the squid (2.7) package was being used previously we protected
		# the squid.conf file, which was not tracked as a conffile.
		# Use '< 2.8' version to catch backports and security versions >2.7.
		#
		if dpkg --compare-versions "$2" lt '2.8' && test -f /etc/squid/squid.conf.pre3.5_upgrade; then
			md5pre35=$(md5sum /etc/squid/squid.conf.pre3.5_upgrade | awk '{ print $1 }')
			if [ "$md5pre35" = "6d674d5f9842b50a2c691a135007c804" ] || \
				[ "$md5pre35" = "5d85f7dce9a84082e23a656b3cb0c984" ]; then
				# The old configuration file was unchanged from the version shipped
				# with squid 2.7, keep the new one in place and delete the old one.
				rm -f /etc/squid/squid.conf.pre3.5_upgrade
			else
				#
				# Our special 2.x protection left squid.conf absent,
				# so the new package installing put its own there.
				# It would normally have just created a *.dpkg-dist
				#
				mv /etc/squid/squid.conf /etc/squid/squid.conf.dpkg-dist

				#
				# Restore the old user file as main squid.conf
				#
				mv /etc/squid/squid.conf.pre3.5_upgrade /etc/squid/squid.conf
			fi
		fi

		#
		# Chown the directories.
		#
		log_dir=/var/log/squid
		cache_dir=`grepconf2 cache_dir /var/spool/squid`
		usr=`grepconf cache_effective_user proxy`
		grp=`grepconf cache_effective_group proxy`

		if [ "$(stat -c %U $cache_dir)" != "$usr" ] ||
		   [ "$(stat -c %G $cache_dir)" != "$grp" ] ; then
			chown $usr:$grp $cache_dir
		fi

		if [ "$(stat -c %U $log_dir)" != "$usr" ] ||
		   [ "$(stat -c %G $log_dir)" != "$grp" ] ; then
			if [ "$(dpkg-statoverride --list $log_dir)" = "" ] ; then
		  		chown $usr:$grp $log_dir
			fi
		fi

		# If we have setcap is installed, try setting cap_net_raw+ep,
		# which allows us to install our binaries without the setuid
		# bit.
		PINGER=/usr/lib/squid/pinger
		if command -v setcap > /dev/null; then
			if setcap cap_net_raw+ep $PINGER; then
				echo "Setcap worked! $PINGER is not suid!"
			else
				echo "Setcap failed on $PINGER, falling back to setuid" >&2
				chmod u+s $PINGER
			fi
		else
			echo "Setcap is not installed, falling back to setuid" >&2
			chmod u+s $PINGER
		fi

		#
		# Ensure that any obsolete squid3 that may be running is stopped.
		#
		if [ -f /var/run/squid3.pid ] && kill -0 "$(cat /var/run/squid3.pid)" 2>/dev/null && dpkg --compare-versions "$2" lt '3.5'; then
			invoke-rc.d squid3 stop
			invoke-rc.d squid restart
		else
			invoke-rc.d squid restart
		fi

		;;
	abort-upgrade|abort-remove|abort-deconfigure)
		;;
	*)
		#
		#	Unknown action - do nothing.
		#
		exit 0
		;;
esac

# dh_installdeb will replace this with shell code automatically
# generated by other debhelper scripts.

# Automatically added by dh_apparmor/2.13.3-7ubuntu5.1
if [ "$1" = "configure" ]; then
    APP_PROFILE="/etc/apparmor.d/usr.sbin.squid"
    if [ -f "$APP_PROFILE" ]; then
        # Add the local/ include
        LOCAL_APP_PROFILE="/etc/apparmor.d/local/usr.sbin.squid"

        test -e "$LOCAL_APP_PROFILE" || {
            mkdir -p `dirname "$LOCAL_APP_PROFILE"`
            install --mode 644 /dev/null "$LOCAL_APP_PROFILE"
        }

        # Reload the profile, including any abstraction updates
        if aa-enabled --quiet 2>/dev/null; then
            apparmor_parser -r -T -W "$APP_PROFILE" || true
        fi
    fi
fi
# End automatically added section
# Automatically added by dh_systemd_enable/12.10ubuntu1
if [ "$1" = "configure" ] || [ "$1" = "abort-upgrade" ] || [ "$1" = "abort-deconfigure" ] || [ "$1" = "abort-remove" ] ; then
	# This will only remove masks created by d-s-h on package removal.
	deb-systemd-helper unmask 'squid.service' >/dev/null || true

	# was-enabled defaults to true, so new installations run enable.
	if deb-systemd-helper --quiet was-enabled 'squid.service'; then
		# Enables the unit on first installation, creates new
		# symlinks on upgrades if the unit file has changed.
		deb-systemd-helper enable 'squid.service' >/dev/null || true
	else
		# Update the statefile to add new symlinks (if any), which need to be
		# cleaned up on purge. Also remove old symlinks.
		deb-systemd-helper update-state 'squid.service' >/dev/null || true
	fi
fi
# End automatically added section
# Automatically added by dh_installinit/12.10ubuntu1
if [ "$1" = "configure" ] || [ "$1" = "abort-upgrade" ] || [ "$1" = "abort-deconfigure" ] || [ "$1" = "abort-remove" ] ; then
	# In case this system is running systemd, we need to ensure that all
	# necessary tmpfiles (if any) are created before starting.
	if [ -d /run/systemd/system ] ; then
		systemd-tmpfiles --create squid.conf >/dev/null || true
	fi
fi
# End automatically added section
# Automatically added by dh_installdeb/12.10ubuntu1
dpkg-maintscript-helper rm_conffile /etc/squid3/msntauth.conf 3.5.4-1\~ squid3 -- "$@"
dpkg-maintscript-helper mv_conffile /etc/squid3/squid.conf /etc/squid/squid.conf 3.5.4-1\~ squid3 -- "$@"
dpkg-maintscript-helper mv_conffile /etc/squid3/errorpage.css /etc/squid/errorpage.css 3.5.4-1\~ squid3 -- "$@"
# End automatically added section
# Automatically added by dh_installinit/12.10ubuntu1
if [ "$1" = "configure" ] || [ "$1" = "abort-upgrade" ] || [ "$1" = "abort-deconfigure" ] || [ "$1" = "abort-remove" ] ; then
	if [ -x "/etc/init.d/squid" ]; then
		update-rc.d squid defaults >/dev/null
		if [ -n "$2" ]; then
			_dh_action=restart
		else
			_dh_action=start
		fi
		invoke-rc.d squid $_dh_action || exit 1
	fi
fi
# End automatically added section


exit 0
