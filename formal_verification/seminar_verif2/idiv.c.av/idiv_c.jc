
axiomatic Padding {

  logic type padding
  
}

tag voidP = {
}

type voidP = [voidP]

tag charP = voidP with {
  int8 charM: 8;
}

tag intP = {
  int32 intM: 32;
}

type intP = [intP]

int32 idiv(int32 a, int32 b, intP[..] r)
  requires ((_C_16 : ((_C_17 : (a >= (0 :> int32))) &&
                       (_C_18 : (b > (0 :> int32))))) &&
             (_C_19 : \at((((\offset_min(\at(r,Here)) <= \at(0,Here)) &&
                             (\offset_max(\at(r,Here)) >= \at(0,Here))) &&
                            true),Here)));
behavior default:
  assigns r.intM;
  ensures (_C_15 : ((\at(a,Old) :> integer) ==
                     (((\at(b,Old) :> integer) * (\result :> integer)) +
                       (\at(r,Old).intM :> integer))));
{  
   (var int32 q);
   
   (var int32 p);
   
   {  (_C_1 : (q = (0 :> int32)));
      (_C_2 : (p = a));
      
      {  
         (assert for default: (_C_3 : (astraver : ((a :> integer) ==
                                                    (((b :> integer) *
                                                       (q :> integer)) +
                                                      (p :> integer))))));
         ()
      };
      (LoopEntry : 
      loop 
      behavior default:
        invariant (_C_5 : ((a :> integer) ==
                            (((b :> integer) * (q :> integer)) +
                              (p :> integer))));
      behavior default:
        
        assigns q,
        p;
      variant (_C_4 : p);
      while (true)
      {  
         {  (LoopCurrent : (if (_C_6 : (p >= b)) then () else 
                           (goto while_0_break)));
            
            {  (_C_9 : (q = (_C_8 : ((_C_7 : (q + (1 :> int32))) :> int32))));
               (_C_12 : (p = (_C_11 : ((_C_10 : (p - b)) :> int32))))
            }
         }
      });
      (while_0_break : ());
      (_C_14 : ((_C_13 : r.intM) = p));
      
      (return q)
   }
}
